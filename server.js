(()=>{var s={3:(s,e,t)=>{const a=t(252),{GoogleGenerativeAI:n}=t(639),r=a.Router(),o=t(494),c=new n(process.env.GEMINI_API_KEY).getGenerativeModel({model:"gemini-1.5-flash-latest"});async function i(s,e){const[t]=await o.query("\n    SELECT s.name AS student_name, m.ai_summary \n    FROM markcards m\n    JOIN students s ON m.student_id = s.student_id\n    WHERE m.class_id = ? AND m.school_id = ? AND m.ai_summary IS NOT NULL\n  ",[e,s]);if(0===t.length)return"No individual summaries were found for this class. Please upload student mark cards first.";const a=`\n    You are an expert educational analyst assisting a teacher.\n    Based on the following collection of individual student mark card summaries, provide a consolidated, subject-wise performance overview for the entire class.\n    Your summary should identify common areas of strength and weakness and be written in a concise, helpful tone for a teacher.\n    Here are the individual summaries:\n    ${t.map(s=>`Student: ${s.student_name}\nSummary: ${s.ai_summary}`).join("\n\n---\n\n")}\n  `,n=await c.generateContent(a);return(await n.response).text()}r.get("/ClassSummary",async(s,e)=>{const{class_id:t,school_id:a,teacher_id:n}=s.query;if(!t||!a||!n)return e.status(400).json({status:400,MSG:"Missing class_id, school_id, or teacher_id"});try{const s="\n      SELECT ai_summary FROM class_teachers \n      WHERE teacher_id = ? AND class_id = ?\n    ",[r]=await o.query(s,[n,t]);if(r.length>0&&r[0].ai_summary)return e.json({status:200,class_summary:r[0].ai_summary});const c=await i(a,t),u="\n      UPDATE class_teachers SET ai_summary = ? \n      WHERE teacher_id = ? AND class_id = ?\n    ";await o.query(u,[c,n,t]),e.json({status:200,class_summary:c})}catch(s){console.error("Get Class Summary Error:",s),e.status(500).json({status:500,MSG:"An error occurred while getting the class summary."})}}),r.post("/RefreshClassSummary",async(s,e)=>{const{class_id:t,school_id:a,teacher_id:n}=s.body;if(!t||!a||!n)return e.status(400).json({status:400,MSG:"Missing class_id, school_id, or teacher_id"});try{const s=await i(a,t);console.log(s);const r="\n          UPDATE class_teachers SET ai_summary = ? \n          WHERE teacher_id = ? AND class_id = ?\n        ";await o.query(r,[s,n,t]),e.json({status:200,class_summary:s})}catch(s){console.error("Refresh Class Summary Error:",s),e.status(500).json({status:500,MSG:"An error occurred while refreshing the class summary."})}}),r.get("/teacher/:teacherId/classes",async(s,e)=>{const{teacherId:t}=s.params;if(!t)return e.status(400).json({status:400,MSG:"Missing teacher ID."});try{const s="\n            SELECT c.class_id, c.class_name\n            FROM classes c\n            JOIN class_teachers ct ON c.class_id = ct.class_id\n            WHERE ct.teacher_id = ?\n            ORDER BY c.class_name ASC\n        ",[a]=await o.query(s,[t]);e.json({status:200,classes:a})}catch(s){console.error("Error fetching teacher classes:",s),e.status(500).json({status:500,MSG:"Database error while fetching classes."})}}),r.get("/summary/:studentId",async(s,e)=>{const{studentId:t}=s.params;if(!t)return e.status(400).json({success:!1,message:"Student ID is required."});try{const s="\n      SELECT ai_summary\n      FROM markcards \n      WHERE student_id = ? \n      ORDER BY uploaded_at DESC \n      LIMIT 1\n    ",[a]=await o.query(s,[t]);if(0===a.length)return e.status(404).json({success:!1,message:"No mark card found for this student."});let n=[];if(a[0].File_readings)try{n=JSON.parse(a[0].File_readings)}catch(s){console.error("JSON parsing error for File_readings:",s)}e.json({success:!0,summary:a[0].ai_summary||"No summary available.",file_readings:n})}catch(s){console.error("Error fetching student summary:",s),e.status(500).json({success:!1,message:"Server Error"})}}),s.exports=r},86:s=>{"use strict";s.exports=require("ws")},196:(s,e,t)=>{const a=t(252),n=a.Router();n.use(a.json());const r=t(903),o=t(494);function c(s=8){let e="";for(let t=0;t<s;t++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".charAt(Math.floor(36*Math.random()));return e}async function i(s){const[e]=await o.query("SELECT COUNT(*) AS count FROM schools WHERE school_id = ?",[s]);return e[0].count>0}function u(){return Math.floor(1e3+9e3*Math.random())}n.post("/AddSchool",async function(s,e){console.log("Entered");const{HeadName:t,SchoolName:a,SchoolAddress:n}=s.body;if(!t||!a)return e.status(400).json({error:"Missing required fields"});try{let s,r=0;do{if(s=c(8),r++,r>10)return e.status(500).json({error:"Failed to generate unique school ID"})}while(await i(s));const u="\n      INSERT INTO schools (headmaster_name, school_name, school_adr, school_id)\n      VALUES (?, ?, ?, ?)\n    ",[l]=await o.query(u,[t,a,n||null,s]);return e.json({status:200,msg:"completeed"})}catch(s){console.error("Insert Error:",s),e.status(500).json({error:"Database insert error"})}}),n.get("/GetSchools",async function(s,e){console.log("getting the school");try{const s="SELECT * FROM schools ORDER BY add_date DESC",[t]=await o.query(s);e.json({status:200,count:t.length,schools:t})}catch(s){console.error("Fetch schools error:",s),e.status(500).json({error:"Database fetch error"})}}),n.post("/AddTeacher",async(s,e)=>{const{school_id:t,teacher_name:a,subject:n}=s.body;if(!t||!a||!n)return e.status(400).json({status:400,message:"Missing required fields: school_id, teacher_name, and subject are required."});try{const s=await async function(){let s,e=!0;for(;e;){s=u();const[t]=await o.query("SELECT teacher_id FROM teachers WHERE teacher_id = ?",[s]);0===t.length&&(e=!1)}return s}(),c=new Date,i=`${r.v7()}_${r.v6()}`,l="\n      INSERT INTO teachers\n        (teacher_id, school_id, name, subject, created_at, Token)\n      VALUES (?, ?, ?, ?, ?, ?)\n    ",[d]=await o.query(l,[s,t,a,n,c,i]);e.status(200).json({status:200,message:"Teacher added successfully",teacher_id:s})}catch(s){console.error("Database insert error:",s),e.status(500).json({status:500,message:"Failed to add teacher due to server error."})}}),n.get("/GetTeachers",async(s,e)=>{console.log("starting");try{const s="SELECT TID, teacher_id, school_id, name, subject, created_at FROM teachers ORDER BY created_at DESC",[t]=await o.query(s);e.json({status:200,teachers:t})}catch(s){console.error(s),e.status(500).json({status:500,message:"Failed to fetch teachers"})}}),n.get("/GetTeachersForClass",async(s,e)=>{console.log("starting");try{const{school_id:t}=s.query;let a="\n      SELECT teacher_id, school_id, name, subject, created_at\n      FROM teachers\n    ",n=[];t&&(a+=" WHERE school_id = ? ",n.push(t)),a+=" ORDER BY created_at DESC";const[r]=await o.query(a,n);e.json({status:200,teachers:r})}catch(s){console.error(s),e.status(500).json({status:500,message:"Failed to fetch teachers"})}}),n.post("/AddClass",async(s,e)=>{try{const{school_id:t,class_name:a,main_teacher_id:n}=s.body;if(console.log(s.body),!t||!a||!n)return e.status(400).json({status:400,message:"Missing required fields"});const r="\n      INSERT INTO classes (school_id, class_name, main_teacher_id, created_at)\n      VALUES (?, ?, ?, NOW())\n    ",[c]=await o.query(r,[t,a,n]);e.json({status:200,message:"Class added successfully",insertedId:c.insertId})}catch(s){console.error("Error adding class:",s),e.status(500).json({status:500,message:"Failed to add class"})}}),n.get("/GetClassesBySchool/:school_id",async(s,e)=>{try{const{school_id:t}=s.params;if(!t)return e.status(400).json({status:400,message:"School ID is required"});const a="\n      SELECT *FROM classes\n      WHERE school_id = ?\n    ",[n]=await o.query(a,[t]);e.json({status:200,data:n})}catch(s){console.error("Error fetching classes:",s),e.status(500).json({status:500,message:"Failed to fetch classes"})}}),n.post("/Addtoclasses",async(s,e)=>{try{const{class_id:t,teacher_ids:a}=s.body;if(!t||!Array.isArray(a)||0===a.length)return e.status(400).json({status:400,MSG:"Invalid input"});for(const s of a){const[e]=await o.query("SELECT 1 FROM class_teachers WHERE class_id = ? AND teacher_id = ?",[t,s]);0===e.length&&await o.query("INSERT INTO class_teachers (class_id, teacher_id) VALUES (?, ?)",[t,s])}return e.json({status:200,MSG:"completed"})}catch(s){return console.error("Error in /Addtoclasses:",s),e.status(500).json({status:500,MSG:"Internal server error"})}}),n.post("/AddStudent",async(s,e)=>{const{school_id:t,class_id:a,students:n}=s.body;if(!t||!a||!Array.isArray(n)||0===n.length)return e.status(400).json({status:400,MSG:"Missing required fields or no students"});try{const s=()=>Math.floor(1e7+9e7*Math.random()).toString(),r=n.map(e=>[a,t,s(),e.name]),c="\n      INSERT INTO students (class_id, School_id, SLID, name)\n      VALUES ?\n    ";await o.query(c,[r]);const i=(new Date).getFullYear(),u=n.length,l="\n      INSERT INTO analastics (school_id, year, count)\n      VALUES (?, ?, ?)\n      ON DUPLICATE KEY UPDATE count = count + VALUES(count);\n    ";await o.query(l,[t,i,u]),e.json({status:200,MSG:"Students added and analytics updated successfully"})}catch(s){console.error("DB Transaction Error:",s),e.status(500).json({status:500,MSG:"Database error during transaction"})}}),s.exports=n},206:(s,e,t)=>{const a=t(829);s.exports=(s,e,t)=>{const n=s.header("Authorization");if(!n||!n.startsWith("Bearer "))return e.status(401).json({msg:"Authorization denied. No token provided."});try{const e=n.split(" ")[1],r=a.verify(e,process.env.JWT_SECRET);s.user=r,t()}catch(s){e.status(401).json({msg:"Token is not valid."})}}},252:s=>{"use strict";s.exports=require("express")},262:(s,e,t)=>{const a=t(252),n=a.Router(),r=t(486),o=t(982),c=t(906),i=t(461),u=t(928),l=t(896),d=t(829),m=t(206);n.use(a.json());const h=t(494);n.post("/Register",async(s,e)=>{console.log("POST /Register endpoint hit.");try{const{ID:t,Email:a,NewPassword:n}=s.body;if(!t||!a||!n)return e.json({status:400,MSG:"School ID, Email, and New Password are required."});if(!c.isEmail(a))return e.json({status:400,MSG:"Please enter a valid email address."});const{error:i}=(s=>{const e=/[A-Z]/.test(s),t=/[a-z]/.test(s),a=/\d/.test(s),n=s.length>=8;return e&&t&&a&&n?{error:null}:{error:{details:[{message:"Password must contain at least one uppercase, one lowercase, one number, and be min 8 characters"}]}}})(n);if(i)return e.json({status:400,MSG:`Password invalid: ${i.details[0].message}`});const u=await async function(s){try{const[e]=await h.query("SELECT school_id, is_register, school_name, headmaster_name FROM schools WHERE school_id = ?",[s]);if(0===e.length)return{MSG:"The School not added to Elmind",status:404};const t=e[0];return 1===t.is_register?{MSG:"The account for this School ID is already registered",status:404}:{MSG:"School ID is valid and ready for registration",status:200,Data:t}}catch(s){return console.error("Error in IDcheck function:",s),{MSG:"An error occurred during ID verification, please try again",status:500}}}(t);if(200!==u.status)return e.json(u);const l=function(s=64){return o.randomBytes(Math.ceil(s/2)).toString("hex").slice(0,s)}(64),d=await r.hash(n,10),[m]=await h.query("UPDATE schools\n            SET hash_password = ?, Token = ?, is_register = 1, school_email = ?\n            WHERE school_id = ?",[d,l,a,t]);return 0===m.affectedRows?e.json({status:404,MSG:"Failed to update school registration. School ID not found."}):e.json({status:200,MSG:"Registration completed successfully!",token:l})}catch(s){return console.error("Error during /Register process:",s),e.json({status:500,MSG:"An unexpected error occurred during registration, please try again."})}}),n.post("/Login",async(s,e)=>{const{ID:t,email:a,Password:n}=s.body;if(console.log(s.body),!t||!a||!n)return e.status(400).json({success:!1,message:"All fields are required"});if(!c.isEmail(a))return e.status(400).json({success:!1,message:"Please enter a valid email address."});try{const[s]=await h.execute("SELECT school_id, school_name, school_email, headmaster_name, hash_password, is_register, image\n       FROM schools\n       WHERE school_id = ? LIMIT 1",[t]),o={success:!1,message:"Invalid credentials"};if(0===s.length)return e.status(401).json(o);const c=s[0];if(c.school_email!==a)return e.status(401).json(o);if(!await r.compare(n,c.hash_password))return e.status(401).json(o);if(1!==c.is_register)return e.status(403).json({success:!1,message:"This account has not been registered yet."});const i={school_id:c.school_id,name:c.school_name},u=d.sign(i,process.env.JWT_SECRET,{expiresIn:"24h"});await h.execute("UPDATE schools SET is_logged = 1, Token = ? WHERE school_id = ?",[u,t]);const l={school_id:c.school_id,school_name:c.school_name,headmaster_name:c.headmaster_name,image:c.image};return e.status(200).json({success:!0,message:"Login successful",data:{school:l,Token:u}})}catch(s){return console.error("❌ Error in School/Login:",s),e.status(500).json({success:!1,message:"Server error. Please try again later."})}}),n.get("/validate-session",m,async(s,e)=>{try{const[t]=await h.execute("SELECT school_id, school_name, headmaster_name, image FROM schools WHERE school_id = ?",[s.user.school_id]);if(0===t.length)return e.status(404).json({success:!1,message:"User not found."});e.status(200).json({success:!0,message:"Session is valid.",data:{school:t[0]}})}catch(s){console.error("❌ Error in /validate-session:",s),e.status(500).json({success:!1,message:"Server error."})}});const g=u.join(process.cwd(),"uploads","school_images");l.existsSync(g)||l.mkdirSync(g,{recursive:!0});const _=i.diskStorage({destination:(s,e,t)=>{t(null,g)},filename:(s,e,t)=>{const a=Date.now()+"-"+Math.round(1e9*Math.random());t(null,e.fieldname+"-"+a+u.extname(e.originalname))}}),E=i({storage:_,limits:{fileSize:5242880},fileFilter:(s,e,t)=>{console.log("--- Multer File Debug Info ---"),console.log("Original Filename:",e.originalname),console.log("MIME Type:",e.mimetype),console.log("File Extension:",u.extname(e.originalname).toLowerCase().replaceAll(".","").replaceAll(" ","")),console.log("------------------------------");const a=/jpeg|jpg|png|gif/,n=a.test(u.extname(e.originalname).toLowerCase().replaceAll(".","")),r=a.test(e.mimetype);if(console.log(r),n)return t(null,!0);console.log("File filter failed: extname_match=",n,"mimetype_match=",r),t(new Error("Only images (JPEG, PNG, GIF) are allowed!"))}});n.post("/uploadSchoolImage",E.single("image"),async(s,e)=>{let t;console.log(s.body);try{const a=s.body.ID,n=s.body.Token,r=s.file;if(!a||!n)return e.status(400).json({Status:400,MSG:"Missing ID or Token."});if(!r)return e.status(400).json({Status:400,MSG:"No image file uploaded or invalid file type."});t=await h.getConnection();const[o]=await t.execute("SELECT `image` FROM `schools` WHERE `school_id` = ? AND `Token` = ?",[a,n]);if(0===o.length)return l.unlinkSync(r.path),e.status(401).json({Status:401,MSG:"Authentication failed. Invalid ID or Token."});const c=o[0].image;if(c)try{let s;const e="/uploads/school_images/",t=c.indexOf(e);s=-1!==t?c.substring(t+e.length):u.basename(c);const a=u.join(g,s);l.existsSync(a)?(l.unlinkSync(a),console.log(`Deleted old image: ${a}`)):console.log(`Old image file not found on disk: ${a}`)}catch(s){console.error(`Error deleting old image file: ${c}`,s)}const i=`/uploads/school_images/${r.filename}`,[d]=await t.execute("UPDATE `schools` SET `image` = ? WHERE `school_id` = ?",[i,a]);d.affectedRows>0?e.status(200).json({Status:200,MSG:"Image uploaded and path updated successfully.",ImageUrl:i}):(l.unlinkSync(r.path),e.status(500).json({Status:500,MSG:"Failed to update database with image path."}))}catch(t){if(console.error("API Error in /uploadSchoolImage:",t),s.file&&l.existsSync(s.file.path)&&l.unlinkSync(s.file.path),"Only images (JPEG, PNG, GIF) are allowed!"===t.message)return e.status(400).json({Status:400,MSG:t.message});e.status(500).json({Status:500,MSG:"An internal server error occurred."})}finally{t&&t.release()}}),n.post("/logout",async(s,e)=>{const{Token:t}=s.body;if(!t)return e.status(400).json({Status:400,MSG:"Token is required"});let a;try{a=await h.getConnection();const[s]=await a.execute("SELECT * FROM `schools` WHERE `Token` = ?",[t]);if(0===s.length)return e.status(401).json({Status:401,MSG:"Invalid token"});const[n]=await a.execute("UPDATE `schools` SET `is_logged` = 0 WHERE `Token` = ?",[t]);n.affectedRows>0?e.status(200).json({Status:200,MSG:"Logout successful"}):e.status(500).json({Status:500,MSG:"Failed to update logout status"})}catch(s){console.error("Logout API error:",s),e.status(500).json({Status:500,MSG:"Internal server error"})}finally{a&&a.release()}}),s.exports=n},268:s=>{"use strict";s.exports=require("body-parser")},318:(s,e,t)=>{const a=t(252),n=t(494),r=a.Router();r.get("/FullChat/:senderId/:receiverId/:class_id",async(s,e)=>{const{senderId:t,receiverId:a,class_id:r}=s.params;try{const o="\n      UPDATE chats SET is_read = 1 \n      WHERE receiver_id = ? AND sender_id = ? AND class_id = ? AND is_read = 0;\n    ",[c]=await n.query(o,[t,a,r]);if(c.affectedRows>0){console.log(`✅ Marked ${c.affectedRows} message(s) as read.`);const e={type:"MESSAGES_READ",payload:{reader_id:t,original_sender_id:a,class_id:r}};s.sendMessageToUser(a,e)}const i="\n      SELECT * FROM chats \n      WHERE (sender_id = ? AND receiver_id = ? AND class_id = ?)\n         OR (sender_id = ? AND receiver_id = ? AND class_id = ?)\n      ORDER BY send_time ASC;\n    ",[u]=await n.query(i,[t,a,r,a,t,r]);return e.json(u)}catch(s){return console.error("❌ Error in FullChat route:",s.message),e.status(500).json({error:"Database error"})}}),r.post("/chats",async(s,e)=>{const{sender_type:t,sender_id:a,receiver_id:r,message_content:o,media_url:c,class_id:i}=s.body;try{const u="\n      INSERT INTO chats (class_id, sender_type, sender_id, receiver_id, message_content, media_url) \n      VALUES (?, ?, ?, ?, ?, ?)\n    ",[l]=await n.query(u,[i,t,a,r,o,c]),d=l.insertId,m="SELECT * FROM chats WHERE chat_id = ?",[h]=await n.query(m,[d]);if(!h||0===h.length)return e.json({message:"Message sent, but broadcast failed.",chat_id:d});const g=h[0];return s.sendMessageToUser(a,g),s.sendMessageToUser(r,g),e.json({message:"Message sent!",chat_id:d})}catch(s){return console.error("❌ DB Insert Error:",s),e.status(500).json({error:"Failed to save message."})}}),r.post("/mark-as-read",async(s,e)=>{const{class_id:t,reader_id:a,sender_id:r}=s.body;if(!t||!a||!r)return e.status(400).json({error:"Missing required fields."});try{const[o]=await n.query("\n    UPDATE chats SET is_read = 1 \n    WHERE receiver_id = ? AND sender_id = ? AND class_id = ? AND is_read = 0;\n  ",[a,r,t]);if(o.affectedRows>0){const e={type:"MESSAGES_READ",payload:{reader_id:a,original_sender_id:r,class_id:t}};s.sendMessageToUser(r,e)}return e.status(200).json({message:"Messages marked as read."})}catch(s){return console.error("❌ Database update failed:",s),e.status(500).json({error:"Database update failed."})}}),r.get("/chats/users/:userId/class/:classId",async(s,e)=>{const{userId:t,classId:a}=s.params;try{const[s]=await n.query("\n    SELECT \n        c.chat_id, c.class_id,\n        CASE WHEN c.sender_id = ? THEN c.receiver_id ELSE c.sender_id END AS chat_user_id,\n        c.message_content AS last_message, c.send_time AS last_message_time,\n        c.sender_id, c.sender_type, c.is_read,\n        s.name AS other_user_name, s.email AS other_user_email, s.SLID AS ID\n    FROM chats c\n    INNER JOIN (\n        SELECT \n            class_id, MAX(chat_id) AS last_chat_id,\n            CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END AS chat_user_id\n        FROM chats\n        WHERE (sender_id = ? OR receiver_id = ?) AND class_id = ?\n        GROUP BY class_id, chat_user_id\n    ) t ON c.chat_id = t.last_chat_id\n    JOIN students s ON s.student_id = t.chat_user_id\n    ORDER BY c.send_time DESC\n  ",[t,t,t,t,a]);return e.status(200).json(s)}catch(s){return console.error("❌ Error fetching chat users by class:",s),e.status(500).json({error:"Database query failed."})}}),s.exports=r},416:s=>{"use strict";s.exports=require("pdf-parse")},455:(s,e,t)=>{const a=t(252).Router(),n=t(494),r=t(206);a.post("/submit",r,async(s,e)=>{const{id:t,school_id:a}=s.user,{class_id:r,date:o,attendance:c}=s.body;if(!r||!o||!Array.isArray(c))return e.status(400).json({success:!1,message:"Missing required fields."});if(!t||!a)return e.status(401).json({success:!1,message:"Authorization failed: Invalid token."});let i;try{i=await n.getConnection(),await i.beginTransaction();const[s]=await i.query("INSERT INTO attendance_history (school_id, class_id, teacher_id, attendance_date)\n       VALUES (?, ?, ?, ?)",[a,r,t,o]),u=s.insertId;if(c.length>0){const s=c.map(s=>[u,s.student_id,s.status]);await i.query("INSERT INTO attendance_records (history_id, student_id, status) VALUES ?",[s])}await i.commit(),e.status(200).json({success:!0,message:"Attendance recorded successfully."})}catch(s){i&&await i.rollback(),console.error("❌ Transaction Error:",s),e.status(500).json({success:!1,message:"Database error."})}finally{i&&i.release()}}),a.get("/history/:classId",r,(s,e)=>{const{school_id:t}=s.user,{classId:a}=s.params;n.query("\n        SELECT \n            ah.history_id, c.class_name, ah.attendance_date, \n            SUM(CASE WHEN ar.status = 1 THEN 1 ELSE 0 END) AS present_count,\n            SUM(CASE WHEN ar.status = 0 THEN 1 ELSE 0 END) AS absent_count\n        FROM attendance_history ah\n        JOIN classes c ON c.class_id = ah.class_id\n        LEFT JOIN attendance_records ar ON ar.history_id = ah.history_id\n        WHERE ah.school_id = ? AND ah.class_id = ?\n        GROUP BY ah.history_id, c.class_name, ah.attendance_date\n        ORDER BY ah.attendance_date DESC\n    ",[t,a],(s,t)=>{if(s)return console.error("❌ Error fetching attendance history:",s),e.status(500).json({success:!1,message:"Database query failed"});e.status(200).json({success:!0,history:t})})}),a.get("/details/:historyId",r,(s,e)=>{const{historyId:t}=s.params;n.query("\n        SELECT s.student_id, s.name, ar.status\n        FROM attendance_records ar\n        JOIN students s ON s.student_id = ar.student_id\n        WHERE ar.history_id = ?\n    ",[t],(s,t)=>{if(s)return console.error("❌ Error fetching attendance details:",s),e.status(500).json({success:!1,message:"Database query failed"});e.status(200).json({success:!0,details:t})})}),a.get("/STDhistory/:studentId",async(s,e)=>{const t=parseInt(s.params.studentId,10);if(isNaN(t)||t<=0)return e.status(400).json({status:!1,message:"Invalid or missing student ID."});try{const[s]=await n.query("SELECT record_id, history_id, student_id, status, recorded_at FROM attendance_records WHERE student_id = ?",[t]);e.json({status:!0,data:s})}catch(s){console.error("Error fetching attendance records:",s.stack),e.status(500).json({status:!1,message:"Server error fetching attendance data."})}}),s.exports=a},461:s=>{"use strict";s.exports=require("multer")},486:s=>{"use strict";s.exports=require("bcrypt")},494:(s,e,t)=>{t(818).config();const a=t(498).createPool({host:process.env.DB_HOST||"localhost",user:process.env.DB_USER||"root",password:process.env.DB_PASSWORD||"",database:process.env.DB_NAME||"elmind_application",waitForConnections:!0,connectionLimit:30,queueLimit:0});s.exports=a},498:s=>{"use strict";s.exports=require("mysql2/promise")},519:s=>{"use strict";s.exports=JSON.parse('{"type":"service_account","project_id":"notification-29b6d","private_key_id":"5fffd561edffff889a568034697f15f47ebda748","private_key":"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC8mnj1hcLaQ4OT\\n5OBglwTwtzkqBqpnyKI7y4RJmYTLIm5ZfSkfckWrt4rZhdXdvMLpaxoOdKLYQ8ko\\n9qsY1neq2Y5qQFhNCBliBc2lbk0dhvzMtb8IMWckp8VjRzMUPYjO920vpuBoIs3G\\nyyAlwUM9/VfzswffXNvw+poAdvTBm7bDaWvmp6SPAnXSBDrJ+gVScusjQEW/XOpv\\nFxW+bNF9EzKcIxw/8v6hGyearIkRYdBG6HvGvH2n/1jFq55u3fwHUcbKIRqNY9yq\\noGGZoneG5cGsbKy4G93n6JZ6ndEGsbS8fwVdqdErUpftG1MmXv/AWJTyWNBfQcRV\\nETYgMnTvAgMBAAECggEAITOMUaR/fc7ezd0/xqEvRHTswkI0I1sFfENCgXZeEyh3\\nhpdq8tc5/pWsAsj1sjg1k8O/7YWI2UttkSGDUzcGD/SGhpvXL5Bab5AX+KRnPOhz\\nflIMVBPmVWSXcfepvUlr2QtjlDzrSkm+Md22Rg80mCgOIJ+GpkKBkXV8QNKwGZjT\\nfJWjN8/U4uMZOX/x2gZbgX4pZl3d75wO7qtQrAzAy2TSGXchXe+mPYpYGJP0g4u8\\nDMloVdPdEDdN7XnXLBwgUHXEEEpoKkIGHo7rohSuo65LlNfn16ni4koKpORPaBtU\\nB6GuyOSmkHQX/Rz/wNAUgpAj5a8InEDaTzJbOMcquQKBgQDgsvXfmjKvgMfOAZYG\\nJvZoeI4S8b4kj8GV+PQvoalWK+nulfJwUJhyrjNdbwTGhtmHULVO6EtT9P9JIZj2\\nOYzzlSody4vM4UK4f3xZjnQ5BwdS1IpmeUCGHGm/G9tKNXAJD0r8NlKtMCqkwEZm\\nPuUpMyQTXHmLLYk8iuTwid3ubQKBgQDW4Ewk12JTJSxinTaipyL/wMK4LzeFmt7t\\n4rQ1zxGdQ4BCfJw6TRqXui0YdOyAOlWGQnooHXpaDF8NEmHFNgUdBlWgB1ZuNafY\\nYOer+sDg38BFi6ymPyxpQQ6WEWiKq0vUkpq92hyBfDe3gMZZkfvLcUxqjoG8MKU8\\nO8Sum2cnSwKBgEp4BTTODe5MZ+vGasovL4sAKVXt+G51llr13zfKBC0i8Ky51VeT\\n3nJjeXKF0LdbCczm2rAEHLL+h3zdPayc9jHkRckKJJMKNOqglb24kJw10B+LgTLl\\nDJVl5UYJHWxCuZbHErrz5gKv6/IeJzbLsXcuE8623zFZLhp6jdWKW5shAoGBALNE\\n/KH8BC9kIyy/BzcahEul8Y6i7gqMlBMaAcmm0YZIK7jMp7bIXzhY/oiZ/Dpa8MGL\\nssjHFy4Lhj2sqV9UW13EzCkwFf7qyvbumjpUgRjb9FjRWCB3MkE6IsY3DeYrVZ+r\\nFGjykLfC/+UcDd/quI0aIGwCKuDsIN8o6kXWp3ATAoGBAJOEjgTPuB6gc5MZuev4\\noc1aedAI3t2o3yh2/4k3ygMIWar0840Jiqm+IAYPsw7Av/OBD4l8+0iLnHFhchuF\\not5cKgYWjLXQxvj1qjG44toWMaZiDb+F4x/gySIh+uSdpjLbj0VUC5wYWqh6wEzk\\nTW9Ubi0GJUXBZ6yr8YYafHii\\n-----END PRIVATE KEY-----\\n","client_email":"firebase-adminsdk-fbsvc@notification-29b6d.iam.gserviceaccount.com","client_id":"117821401949923691959","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40notification-29b6d.iam.gserviceaccount.com","universe_domain":"googleapis.com"}')},525:(s,e,t)=>{const a=t(252),n=t(494),r=a.Router(),o=t(675);r.post("/create",async(s,e)=>{const{sid:t,author_name:a,title:r,content:c,receiver_type:i}=s.body;if(!(t&&a&&r&&c&&null!=i))return e.status(400).json({success:!1,message:"Missing required fields."});try{const u="INSERT INTO announcements (sid, author_name, title, content, receiver_type) VALUES (?, ?, ?, ?, ?)",l=[t,a,r,c,i],[d]=await n.query(u,l),m={id:d.insertId,...s.body};return(async()=>{try{let s=[];if(0===i){const[e]=await n.query("SELECT fcm_token FROM teachers WHERE school_id = ? AND fcm_token IS NOT NULL",[t]),[a]=await n.query("SELECT fcm_token FROM students WHERE school_id = ? AND fcm_token IS NOT NULL",[t]);s=[...e.map(s=>s.fcm_token),...a.map(s=>s.fcm_token)]}else if(1===i){const[e]=await n.query("SELECT fcm_token FROM students WHERE school_id = ? AND fcm_token IS NOT NULL",[t]);s=e.map(s=>s.fcm_token)}else if(2===i){const[e]=await n.query("SELECT fcm_token FROM teachers WHERE school_id = ? AND fcm_token IS NOT NULL",[t]);s=e.map(s=>s.fcm_token)}const e=s.filter(Boolean);if(e.length>0){console.log(`📲 Sending notification to ${e.length} devices.`);const s={notification:{title:`📢 New Announcement: ${r}`,body:c},tokens:e},t=await o.messaging().sendEachForMulticast(s);console.log(`✅ Sent: ${t.successCount}, ❌ Failed: ${t.failureCount}`)}}catch(s){console.error("❌ Error sending FCM notifications:",s)}})(),s.broadcastToGroup&&(0===i?s.broadcastToGroup(t,"all",{type:"NEW_ANNOUNCEMENT",payload:m}):1===i?s.broadcastToGroup(t,"students",{type:"NEW_ANNOUNCEMENT",payload:m}):2===i&&s.broadcastToGroup(t,"teachers",{type:"NEW_ANNOUNCEMENT",payload:m})),e.status(201).json({success:!0,message:"Announcement created and notifications are being sent.",announcementId:m.id})}catch(s){return console.error("❌ Error creating announcement in DB:",s),e.status(500).json({success:!1,message:"Database server error."})}}),r.post("/deleteAnnouncement",async(s,e)=>{const{id:t}=s.body;if(console.log(t),!t)return e.status(400).json({success:!1,message:"Announcement ID is required."});try{const s="DELETE FROM announcements WHERE id = ?",[a]=await n.query(s,[t]);if(0===a.affectedRows)return e.status(404).json({success:!1,message:"Announcement not found."});e.json({success:!0,message:"Announcement deleted successfully."})}catch(s){console.error("Error deleting announcement:",s),e.status(500).json({success:!1,message:"Server error."})}}),r.get("/list/:sid",async(s,e)=>{const{sid:t}=s.params;console.log(t);try{const s="SELECT * FROM announcements WHERE sid = ? ORDER BY created_at DESC",[a]=await n.query(s,[t]);e.json({success:!0,announcements:a})}catch(s){console.error("Error fetching announcements:",s),e.status(500).json({success:!1,message:"Server error."})}}),s.exports=r},561:(s,e,t)=>{const a=t(252),n=t(494),r=a.Router(),o=t(675);r.post("/create",async(s,e)=>{console.log("Received request to create event:",s.body);const{sid:t,title:a,description:r,event_start:c,event_end:i,organizer_name:u}=s.body;if(!(t&&a&&r&&c&&u))return e.status(400).json({success:!1,message:"Missing required fields."});try{const l="\n      INSERT INTO events \n        (sid, title, description, event_start, event_end, organizer_name) \n      VALUES (?, ?, ?, ?, ?, ?)\n    ",d=[t,a,r,c,i||null,u],[m]=await n.query(l,d),h={id:m.insertId,...s.body};return(async()=>{try{console.log(`Fetching FCM tokens for school: ${t}`);const[s]=await n.query("SELECT fcm_token FROM teachers WHERE school_id = ? AND fcm_token IS NOT NULL",[t]),[e]=await n.query("SELECT fcm_token FROM students WHERE school_id = ? AND fcm_token IS NOT NULL",[t]),c=[...s.map(s=>s.fcm_token),...e.map(s=>s.fcm_token)].filter(Boolean);if(c.length>0){console.log(`📲 Sending event notification to ${c.length} devices.`);const s={notification:{title:`🗓️ New Event: ${a}`,body:r},tokens:c},e=await o.messaging().sendEachForMulticast(s);console.log(`✅ FCM Sent: ${e.successCount}, ❌ Failed: ${e.failureCount}`)}else console.log("No valid FCM tokens found for this school.")}catch(s){console.error("❌ Error sending FCM notifications for new event:",s)}})(),s.broadcastToGroup&&(console.log(`Broadcasting 'NEW_EVENT' to school: ${t}`),s.broadcastToGroup(t,"all",{type:"NEW_EVENT",payload:h})),e.status(201).json({success:!0,message:"Event created and notifications are being sent.",eventId:h.id})}catch(s){return console.error("❌ Error creating event in DB:",s),e.status(500).json({success:!1,message:"Database server error."})}}),r.get("/list/:sid",async(s,e)=>{try{const{sid:t}=s.params;if(console.log("SID from event: "+t),!t)return e.status(400).json({success:!1,message:"School ID is required."});const a=await async function(s){await n.query("DELETE FROM events WHERE sid = ? AND event_end < NOW()",[s]);const[e]=await n.query("SELECT id, title, description, event_start, event_end, organizer_name\n     FROM events\n     WHERE sid = ?\n       AND (event_end IS NULL OR event_end >= NOW())\n     ORDER BY event_start DESC",[s]);return e}(t);e.json({success:!0,events:a})}catch(s){console.error("Error fetching events:",s),e.status(500).json({success:!1,message:"Server error occurred."})}}),s.exports=r},577:s=>{"use strict";s.exports=require("cors")},639:s=>{"use strict";s.exports=require("@google/generative-ai")},644:(s,e,t)=>{const a=t(252).Router(),n=t(486),r=t(906),o=t(829),c=t(206),i=t(494);a.post("/saveFcmToken",async(s,e)=>{const{fcm_token:t,id:a}=s.body;if(!t)return e.status(400).json({message:"FCM token is required."});try{const s="UPDATE teachers SET fcm_token = ? WHERE TID = ?";await i.query(s,[t,a]),e.status(200).json({message:"FCM token saved."})}catch(s){console.error("Error saving FCM token:",s),e.status(500).json({message:"Server error."})}}),a.post("/Create",async(s,e)=>{const{TID:t,Email:a,NewPassword:o,ConPass:c}=s.body;if(o!==c)return e.status(400).json({status:400,MSG:"Passwords do not match"});if(!r.isStrongPassword(o,{minLength:8,minLowercase:1,minUppercase:1,minNumbers:1,minSymbols:1}))return e.status(400).json({status:400,MSG:"Password must be at least 8 characters and include an uppercase letter, a number, and a symbol."});try{const[s]=await i.execute("SELECT * FROM teachers WHERE teacher_id = ? LIMIT 1",[t]);if(0===s.length)return e.status(404).json({status:404,MSG:"Invalid Teacher ID"});if(1===s[0].is_Register)return e.status(409).json({status:409,MSG:"Already registered"});const r=await n.hash(o,10);await i.execute("UPDATE teachers SET email = ?, password_hash = ?, is_Register = 1 WHERE teacher_id = ?",[a,r,t]),e.json({status:200,MSG:"Registration successful"})}catch(s){if(console.error("Error in Teacher/Create:",s),"ER_DUP_ENTRY"===s.code&&s.sqlMessage.includes("email"))return e.status(409).json({status:409,MSG:"This email is already registered. Please use a different email."});e.status(500).json({status:500,MSG:"Server error. Please try again later."})}}),a.post("/Login",async(s,e)=>{const{Email:t,TID:a,Password:r}=s.body;if(console.log(s.body),!t||!a||!r)return e.status(400).json({success:!1,message:"All fields are required"});try{const[s]=await i.execute("SELECT TID, school_id, name, email, password_hash, subject, is_Register FROM teachers WHERE teacher_id = ? LIMIT 1",[a]),c={success:!1,message:"Invalid credentials"};if(0===s.length)return e.status(401).json(c);const u=s[0];if(1!==u.is_Register)return e.status(403).json({success:!1,message:"This account has not been registered yet."});if(u.email!==t)return e.status(401).json(c);if(!await n.compare(r,u.password_hash))return e.status(401).json(c);const l={id:u.TID,school_id:u.school_id,email:u.email},d=o.sign(l,process.env.JWT_SECRET,{expiresIn:"24h"});await i.execute("UPDATE teachers SET is_Login = 1, Token = ? WHERE TID = ?",[d,a]);const[m]=await i.execute("SELECT school_name, school_id, image FROM schools WHERE school_id = ? LIMIT 1",[u.school_id]);if(0===m.length)return e.status(500).json({success:!1,message:"Account configuration error: School not found."});const h={TID:u.TID,school_id:u.school_id,name:u.name,email:u.email,subject:u.subject};return e.status(200).json({success:!0,message:"Login successful",data:{teacher:h,school:m[0],Token:d}})}catch(s){return console.error("❌ Error in Teacher/Login:",s),e.status(500).json({success:!1,message:"Server error. Please try again later."})}}),a.get("/AutoLogin",c,async(s,e)=>{try{const t=s.user.id,[a]=await i.execute("SELECT TID, teacher_id, school_id, name, email, subject FROM teachers WHERE TID = ?",[t]);if(0===a.length)return e.status(404).json({msg:"User not found."});e.json({success:!0,msg:"Token is valid. Auto-login successful.",teacher:a[0]})}catch(s){console.error(s),e.status(500).send("Server Error")}}),a.post("/SaveTimeTable",async(s,e)=>{try{const{teacherID:t,timetable:a}=s.body;return console.log(s.body),t&&a?(await i.execute("UPDATE teachers SET TimeTable = ? WHERE TID = ?",[JSON.stringify(a),t]),e.status(200).json({status:200,MSG:"Timetable saved successfully"})):e.status(400).json({status:400,MSG:"Missing required fields"})}catch(s){return console.error(s),e.status(500).json({status:500,MSG:"Server error"})}}),a.get("/GetTimeTable/:teacherID",async(s,e)=>{try{const t=s.params.teacherID;console.log(t);const[a]=await i.execute("SELECT TimeTable FROM teachers WHERE TID = ?",[t]);if(console.log(a),0===a.length||!a[0].TimeTable)return e.status(404).json({status:404,MSG:"No timetable found"});const n=JSON.parse(a[0].TimeTable);return e.status(200).json({status:200,timetable:n})}catch(s){return console.error(s),e.status(500).json({status:500,MSG:"Server error"})}}),a.post("/save-fcm-token",async(s,e)=>{const{teacher_id:t,fcm_token:a}=s.body;if(console.log(s.body),!t||!a)return e.status(400).json({success:!1,message:"Teacher ID and FCM token are required."});try{const s="UPDATE teachers SET fcm_token = ? WHERE TID = ?";await i.query(s,[a,t]),e.json({success:!0,message:"FCM token saved successfully."})}catch(s){console.error("Error saving FCM token:",s),e.status(500).json({success:!1,message:"Server error."})}}),a.post("/logout",c,async(s,e)=>{console.log("Hello");const t=s.user.id;if(!t)return e.status(401).json({msg:"Authorization denied."});try{const s="UPDATE teachers SET fcm_token = NULL, is_Login = 0 WHERE TID = ?";await i.query(s,[t]),e.status(200).json({msg:"Logout successful."})}catch(s){console.error(s.message),e.status(500).send("Server Error")}}),s.exports=a},675:s=>{"use strict";s.exports=require("firebase-admin")},690:(s,e,t)=>{const a=t(252).Router(),n=t(206),r=t(494);a.get("/IsMainTeacher",n,async(s,e)=>{const{id:t}=s.user,{class_id:a}=s.query;if(!t)return e.status(401).json({success:!1,message:"Authorization failed: Token is missing user data."});if(!a)return e.status(400).json({success:!1,message:"Missing required class_id parameter."});try{const[s]=await r.query("SELECT main_teacher_id FROM classes WHERE class_id = ? LIMIT 1",[a]);if(0===s.length)return e.status(404).json({success:!1,message:"Class not found."});const n=s[0].main_teacher_id==t;return e.status(200).json({success:!0,isMainTeacher:n})}catch(s){return console.error("❌ DB Error in IsMainTeacher:",s),e.status(500).json({success:!1,message:"A database error occurred."})}}),a.get("/GetStudents",n,async(s,e)=>{const{school_id:t}=s.user,{class_id:a}=s.query;if(!t)return e.status(401).json({success:!1,message:"Authorization failed: Token is missing school data."});if(!a)return e.status(400).json({success:!1,message:"Missing required class_id parameter."});try{const s="SELECT student_id, name, SLID FROM students WHERE class_id = ? AND school_id = ? ORDER BY name ASC",[n]=await r.query(s,[a,t]);return e.status(200).json({success:!0,students:n})}catch(s){return console.error("❌ DB Error in GetStudents:",s),e.status(500).json({success:!1,message:"An internal server error occurred."})}}),a.post("/AddStudent",n,async(s,e)=>{const{id:t,school_id:a}=s.user,{class_id:n,name:o}=s.body;if(!n||!o)return e.status(400).json({success:!1,message:"Missing required class_id or name."});let c;try{c=await r.getConnection();const[s]=await c.query("SELECT main_teacher_id FROM classes WHERE class_id = ? AND school_id = ?",[n,a]);if(0===s.length||s[0].main_teacher_id!=t)return e.status(403).json({success:!1,message:"Authorization failed. Only the main teacher can add students."});const i=()=>Math.floor(1e7+9e7*Math.random()).toString(),u="INSERT INTO students (class_id, school_id, SLID, name) VALUES (?, ?, ?, ?)";return await c.query(u,[n,a,i(),o]),e.status(201).json({success:!0,message:"Student added successfully."})}catch(s){return console.error("❌ DB Error in AddStudent:",s),e.status(500).json({success:!1,message:"A database error occurred."})}finally{c&&c.release()}}),a.put("/EditStudent",n,async(s,e)=>{const{id:t,school_id:a}=s.user,{student_id:n,name:o}=s.body;if(!n||!o)return e.status(400).json({success:!1,message:"Missing student_id or new name."});let c;try{c=await r.getConnection();const[s]=await c.query("SELECT class_id FROM students WHERE student_id = ? AND school_id = ?",[n,a]);if(0===s.length)return e.status(404).json({success:!1,message:"Student not found in this school."});const{class_id:i}=s[0],[u]=await c.query("SELECT main_teacher_id FROM classes WHERE class_id = ?",[i]);return 0===u.length||u[0].main_teacher_id!=t?e.status(403).json({success:!1,message:"Authorization failed. Only the main teacher can edit students in this class."}):(await c.query("UPDATE students SET name = ? WHERE student_id = ?",[o,n]),e.status(200).json({success:!0,message:"Student updated successfully."}))}catch(s){return console.error("❌ DB Error in EditStudent:",s),e.status(500).json({success:!1,message:"A database error occurred."})}finally{c&&c.release()}}),a.delete("/DeleteStudent/:id",n,async(s,e)=>{const{id:t,school_id:a}=s.user,{id:n}=s.params;let o;try{o=await r.getConnection();const[s]=await o.query("SELECT class_id FROM students WHERE student_id = ? AND school_id = ?",[n,a]);if(0===s.length)return e.status(404).json({success:!1,message:"Student not found in this school."});const{class_id:c}=s[0],[i]=await o.query("SELECT main_teacher_id FROM classes WHERE class_id = ?",[c]);return 0===i.length||i[0].main_teacher_id!=t?e.status(403).json({success:!1,message:"Authorization failed. Only the main teacher can delete students."}):(await o.query("DELETE FROM students WHERE student_id = ?",[n]),e.status(200).json({success:!0,message:"Student deleted successfully."}))}catch(s){return console.error("❌ DB Error in DeleteStudent:",s),e.status(500).json({success:!1,message:"A database error occurred."})}finally{o&&o.release()}}),a.delete("/ClearStudents/:class_id",n,async(s,e)=>{const{id:t,school_id:a}=s.user,{class_id:n}=s.params;let o;try{o=await r.getConnection();const[s]=await o.query("SELECT main_teacher_id FROM classes WHERE class_id = ? AND school_id = ?",[n,a]);return 0===s.length||s[0].main_teacher_id!=t?e.status(403).json({success:!1,message:"Authorization failed. Only the main teacher can clear students."}):(await o.query("DELETE FROM students WHERE class_id = ? AND school_id = ?",[n,a]),e.status(200).json({success:!0,message:"All students cleared successfully."}))}catch(s){return console.error("❌ DB Error in ClearStudents:",s),e.status(500).json({success:!1,message:"A database error occurred."})}finally{o&&o.release()}}),a.get("/GetClasses",n,async(s,e)=>{const{id:t}=s.user;if(!t)return e.status(401).json({success:!1,message:"Authorization failed: Invalid token."});try{const s="\n            SELECT \n                c.class_id, \n                c.class_name \n            FROM classes c\n            JOIN class_teachers ct ON c.class_id = ct.class_id\n            WHERE ct.teacher_id = ?\n            ORDER BY c.class_name ASC\n        ",[a]=await r.query(s,[t]);return e.status(200).json({success:!0,classes:a})}catch(s){return console.error("❌ DB Error in GetClasses:",s),e.status(500).json({success:!1,message:"A database error occurred."})}}),s.exports=a},713:(s,e,t)=>{const a=t(252).Router(),n=t(461),r=t(928),o=(t(498),t(896)),c=t(416),i=t(887),{GoogleGenerativeAI:u}=t(639);t(818).config();const l=t(206),d=t(494),m=new u(process.env.GEMINI_API_KEY).getGenerativeModel({model:"gemini-1.5-flash-latest"}),h=r.join(process.cwd(),"uploads","markcards");o.existsSync(h)||o.mkdirSync(h,{recursive:!0});const g=n.diskStorage({destination:function(s,e,t){t(null,h)},filename:function(s,e,t){const a=(new Date).toISOString().replace(/[-:.TZ]/g,""),n=r.extname(e.originalname);t(null,`${e.originalname.replace(n,"").replace(/\s+/g,"_").replace(/[^a-zA-Z0-9_-]/g,"")}_${a}${n}`)}}),_=n({storage:g});a.post("/UploadMarkcard",[l,_.single("file")],async(s,e)=>{const{id:t,school_id:a}=s.user,{class_id:n,student_id:r}=s.body,u=s.file;if(!n||!r||!u)return u&&o.unlinkSync(u.path),e.status(400).json({success:!1,message:"Missing class ID, student ID, or file."});let l;try{l=await d.getConnection();const[s]=await l.query("SELECT main_teacher_id FROM classes WHERE class_id = ? AND school_id = ?",[n,a]);if(0===s.length||s[0].main_teacher_id!=t)return o.unlinkSync(u.path),e.status(403).json({success:!1,message:"Authorization failed. Only the main class teacher can upload mark cards."});let h="";if("application/pdf"===u.mimetype){const s=o.readFileSync(u.path);h=(await c(s)).text}else{if(!u.mimetype.startsWith("image/"))return o.unlinkSync(u.path),e.status(415).json({success:!1,message:"Unsupported file type."});{const{data:{text:s}}=await i.recognize(u.path,"eng");h=s}}const g=function(s){const e=[],t=s.split("\n"),a=["English","Malayalam","Mathematics","Science","Social Science"];for(const s of t)for(const t of a)if(s.trim().startsWith(t)){const a=s.match(/\d+(\.\d+)?/g);a&&a.length>=2&&e.push({subject:t,marks_80:parseFloat(a[0]),annual_exam_100:parseFloat(a[1])});break}return e}(h),_=JSON.stringify(g),E=await async function(s){if(!s||""===s.trim())return"No text could be extracted from the file.";try{const e=`Summarize the key academic points from this student's mark card text: "${s}"`,t=await m.generateContent(e);return(await t.response).text()}catch(s){return console.error("AI Summary Error:",s),"Could not generate AI summary."}}(h),[y]=await l.query("SELECT markcard_id, file_path FROM markcards WHERE school_id = ? AND class_id = ? AND student_id = ?",[a,n,r]);if(y.length>0){const s=y[0].file_path;return o.existsSync(s)&&o.unlinkSync(s),await l.query("UPDATE markcards SET file_name = ?, file_path = ?, ai_summary = ?, File_readings = ?, uploaded_at = NOW(3) WHERE markcard_id = ?",[u.filename,u.path,E,_,y[0].markcard_id]),e.status(200).json({success:!0,message:"Mark card updated successfully."})}return await l.query("INSERT INTO markcards (school_id, class_id, student_id, file_name, file_path, ai_summary, File_readings, uploaded_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(3))",[a,n,r,u.filename,u.path,E,_]),e.status(201).json({success:!0,message:"Mark card uploaded successfully."})}catch(s){return console.error("❌ Error in UploadMarkcard:",s),u&&o.existsSync(u.path)&&o.unlinkSync(u.path),e.status(500).json({success:!1,message:"Server error during file processing."})}finally{l&&l.release()}}),a.get("/MarkcardHistory",l,async(s,e)=>{const{school_id:t}=s.user,{class_id:a}=s.query;if(!t)return e.status(401).json({success:!1,message:"Authorization failed: Token is missing required school data."});if(!a)return e.status(400).json({success:!1,message:"Missing required class_id parameter."});try{const s="\n            SELECT \n              m.markcard_id, m.student_id, s.name AS student_name,\n              m.file_name, m.file_path, m.uploaded_at AS uploaded_date\n            FROM markcards m\n            JOIN students s ON m.student_id = s.student_id\n            WHERE m.class_id = ? AND m.school_id = ?\n            ORDER BY m.uploaded_at DESC\n        ",[n]=await d.query(s,[a,t]);return e.status(200).json({success:!0,history:n.map(s=>({markcard_id:s.markcard_id,student_id:s.student_id,student_name:s.student_name,file_name:s.file_name,file_url:`/uploads/markcards/${r.basename(s.file_path)}`,uploaded_date:s.uploaded_date}))})}catch(s){return console.error("❌ DB Error in MarkcardHistory:",s),e.status(500).json({success:!1,message:"A database error occurred."})}}),a.delete("/DeleteMarkcard/:id",l,async(s,e)=>{const{id:t,school_id:a}=s.user,{id:n}=s.params;if(!n)return e.status(400).json({success:!1,message:"Mark card ID is required."});let r;try{r=await d.getConnection(),await r.beginTransaction();const[s]=await r.query("SELECT file_path, class_id FROM markcards WHERE markcard_id = ? AND school_id = ?",[n,a]);if(0===s.length)return await r.rollback(),e.status(404).json({success:!1,message:"Mark card not found in this school."});const c=s[0],[i]=await r.query("SELECT main_teacher_id FROM classes WHERE class_id = ?",[c.class_id]);return 0===i.length||i[0].main_teacher_id!=t?(await r.rollback(),e.status(403).json({success:!1,message:"Authorization failed. Only the main class teacher can delete this mark card."})):(await r.query("DELETE FROM markcards WHERE markcard_id = ?",[n]),o.existsSync(c.file_path)&&o.unlinkSync(c.file_path),await r.commit(),e.status(200).json({success:!0,message:"Mark card deleted successfully."}))}catch(s){return r&&await r.rollback(),console.error("❌ Error in DeleteMarkcard:",s),e.status(500).json({success:!1,message:"An internal server error occurred."})}finally{r&&r.release()}}),s.exports=a},717:(s,e,t)=>{const a=t(252).Router(),n=t(461),r=t(928),o=t(896),c=t(675),i=t(206),u=t(494),l="./uploads/assignments";o.existsSync(l)||o.mkdirSync(l,{recursive:!0});const d=n.diskStorage({destination:(s,e,t)=>{t(null,l)},filename:(s,e,t)=>{t(null,Date.now()+"-"+Math.round(1e9*Math.random())+r.extname(e.originalname))}}),m=n({storage:d,fileFilter:(s,e,t)=>{/pdf|doc|docx|jpg|jpeg|png|txt/.test(r.extname(e.originalname).toLowerCase())?t(null,!0):t(new Error("Invalid file type. Only documents and images are allowed."),!1)},limits:{fileSize:15728640}});a.post("/UploadAssignment",[i,m.single("file")],async(s,e)=>{const{id:t,school_id:a}=s.user,{class_id:n,title:r,description:i,due_date:l}=s.body;if(!(s.file&&n&&r&&i&&l))return s.file&&o.unlinkSync(s.file.path),e.status(400).json({success:!1,message:"Missing required fields or file."});let d;try{d=await u.getConnection();const o=s.file.filename,[m]=await d.execute("INSERT INTO assignments (school_id, teacher_id, class_id, title, description, file_name, due_date) VALUES (?, ?, ?, ?, ?, ?, ?)",[a,t,n,r,i,o,l]),h={id:m.insertId,school_id:a,teacher_id:t,class_id:n,title:r,description:i,due_date:l,file_name:o};return(async s=>{let e;try{e=await u.getConnection();const[t]=await e.query("SELECT fcm_token FROM students WHERE school_id = ? AND class_id = ? AND fcm_token IS NOT NULL",[s.school_id,s.class_id]),a=t.map(s=>s.fcm_token).filter(Boolean);if(a.length>0){console.log(`📲 Sending notification to ${a.length} devices.`);const e={notification:{title:`📚 New Assignment: ${s.title}`,body:s.description},tokens:a},t=await c.messaging().sendEachForMulticast(e);console.log(`✅ FCM Sent: ${t.successCount}, ❌ Failed: ${t.failureCount}`)}else console.log("No valid FCM tokens found for this class.")}catch(s){console.error("❌ Error sending FCM notifications:",s)}finally{e&&e.release()}})(h),s.broadcastToGroup&&s.broadcastToGroup(a,"students",{type:"NEW_ASSIGNMENT",payload:h}),e.status(201).json({success:!0,message:"Assignment uploaded successfully.",assignment:h})}catch(t){return console.error("❌ Error uploading assignment:",t),s.file&&o.unlinkSync(s.file.path),e.status(500).json({success:!1,message:"An internal server error occurred."})}finally{d&&d.release()}}),a.get("/AssignmentHistory",i,async(s,e)=>{const{id:t,school_id:a}=s.user,{class_id:n}=s.query;if(!t||!a)return e.status(401).json({success:!1,message:"Authorization failed: Token is missing required user data."});if(!n)return e.status(400).json({success:!1,message:"Missing required class_id parameter."});let r;try{r=await u.getConnection();const[s]=await r.execute("SELECT * FROM assignments \n             WHERE school_id = ? AND class_id = ? AND teacher_id = ?\n             ORDER BY uploaded_date DESC",[a,n,t]);return e.status(200).json({success:!0,history:s})}catch(s){return console.error("❌ Error fetching assignment history:",s),e.status(500).json({success:!1,message:"An internal server error occurred."})}finally{r&&r.release()}}),a.get("/AssignmentsForStudent",i,async(s,e)=>{const{school_id:t}=s.user,{class_id:a}=s.query;if(!t)return e.status(401).json({status:401,message:"Authorization failed: Token is missing required school data."});if(!a)return e.status(400).json({status:400,message:"Missing required class_id parameter."});try{const s="\n            SELECT \n              a.assignment_id, a.title, a.description, a.file_name, a.due_date, a.uploaded_date,\n              t.name AS teacher_name, t.subject AS teacher_subject\n            FROM assignments a\n            JOIN teachers t ON a.teacher_id = t.TID\n            WHERE a.school_id = ? AND a.class_id = ?\n            ORDER BY a.uploaded_date DESC;",[n]=await u.query(s,[t,a]);return e.status(200).json({status:200,assignments:n})}catch(s){return console.error("❌ Error fetching assignments for student:",s),e.status(500).json({status:500,message:"An internal server error occurred."})}}),a.post("/DeleteAssignment",i,async(s,e)=>{const{school_id:t}=s.user,{assignment_id:a}=s.body;if(!a)return e.status(400).json({success:!1,message:"Missing assignment_id."});let n;try{n=await u.getConnection(),await n.beginTransaction();const[s]=await n.execute("SELECT file_name FROM assignments WHERE assignment_id = ? AND school_id = ?",[a,t]);if(0===s.length)return await n.rollback(),e.status(404).json({success:!1,message:"Assignment not found or you do not have permission to delete it."});await n.execute("DELETE FROM assignments WHERE assignment_id = ? AND school_id = ?",[a,t]);const c=r.join(l,s[0].file_name);return o.existsSync(c)&&o.unlinkSync(c),await n.commit(),e.status(200).json({success:!0,message:"Assignment deleted successfully."})}catch(s){return n&&await n.rollback(),console.error("❌ Error deleting assignment:",s),e.status(500).json({success:!1,message:"An internal server error occurred."})}finally{n&&n.release()}}),s.exports=a},729:s=>{"use strict";s.exports=require("bcryptjs")},749:(s,e,t)=>{const a=t(252).Router(),n=t(494),r=t(206),o=t(461),c=t(928),i=t(896),u=t(675),l=c.join(__dirname,"../uploads/alerts");i.existsSync(l)||i.mkdirSync(l,{recursive:!0});const d=o.diskStorage({destination:(s,e,t)=>t(null,l),filename:(s,e,t)=>{t(null,Date.now()+"-"+Math.round(1e9*Math.random())+c.extname(e.originalname))}}),m=o({storage:d});a.post("/schoolsendAlert",[r,m.single("image")],async(s,e)=>{const{school_id:t}=s.user,a=t,{title:r,message:o,duration:c,sender_name:l}=s.body,d=s.file;if(console.log(s.user),console.log(s.body),!r||!o||!l)return d&&i.unlinkSync(d.path),e.status(400).json({success:!1,message:"Missing required title, message, or sender name."});if(!a||!t)return d&&i.unlinkSync(d.path),e.status(401).json({success:!1,message:"Authorization failed: Invalid token."});try{let a=null;s.file&&(a="/uploads/alerts/"+s.file.filename);let i=null;c&&parseInt(c)>0&&(i=new Date(Date.now()+24*parseInt(c)*60*60*1e3));const[d]=await n.query("INSERT INTO alerts (sid, sender_name, title, message, image_url, duration, expires_at)\n             VALUES (?, ?, ?, ?, ?, ?, ?)",[t,l,r,o,a,c||0,i]),m={id:d.insertId,sid:t,sender_name:l,title:r,message:o,image_url:a,expires_at:i,created_at:new Date};return(async()=>{try{const[s]=await n.query("SELECT fcm_token FROM teachers WHERE school_id = ? AND fcm_token IS NOT NULL",[t]),[e]=await n.query("SELECT fcm_token FROM students WHERE school_id = ? AND fcm_token IS NOT NULL",[t]),a=[...s.map(s=>s.fcm_token),...e.map(s=>s.fcm_token)].filter(Boolean);a.length>0&&(console.log(`📲 Sending alert notification to ${a.length} devices.`),await u.messaging().sendEachForMulticast({notification:{title:`⚠️ New Alert: ${r}`,body:o},tokens:a})),console.log(`⭐ Sended alert notification to ${a.length} devices.`)}catch(s){console.error("❌ Error sending FCM for alert:",s)}})(),s.broadcastToGroup&&s.broadcastToGroup(t,"all",{type:"NEW_ALERT",payload:m}),e.status(200).json({success:!0,message:"Alert sent successfully"})}catch(s){return d&&i.existsSync(d.path)&&i.unlinkSync(d.path),console.error("Error sending alert:",s),e.status(500).json({success:!1,message:"Database error"})}}),a.post("/sendAlert",[r,m.single("image")],async(s,e)=>{const{id:t,school_id:a}=s.user,{title:r,message:o,duration:c,sender_name:l}=s.body,d=s.file;if(console.log(s.user),console.log(s.body),!r||!o||!l)return d&&i.unlinkSync(d.path),e.status(400).json({success:!1,message:"Missing required title, message, or sender name."});if(!t||!a)return d&&i.unlinkSync(d.path),e.status(401).json({success:!1,message:"Authorization failed: Invalid token."});try{let t=null;s.file&&(t="/uploads/alerts/"+s.file.filename);let i=null;c&&parseInt(c)>0&&(i=new Date(Date.now()+24*parseInt(c)*60*60*1e3));const[d]=await n.query("INSERT INTO alerts (sid, sender_name, title, message, image_url, duration, expires_at)\n             VALUES (?, ?, ?, ?, ?, ?, ?)",[a,l,r,o,t,c||0,i]),m={id:d.insertId,sid:a,sender_name:l,title:r,message:o,image_url:t,expires_at:i,created_at:new Date};return(async()=>{try{const[s]=await n.query("SELECT fcm_token FROM teachers WHERE school_id = ? AND fcm_token IS NOT NULL",[a]),[e]=await n.query("SELECT fcm_token FROM students WHERE school_id = ? AND fcm_token IS NOT NULL",[a]),t=[...s.map(s=>s.fcm_token),...e.map(s=>s.fcm_token)].filter(Boolean);t.length>0&&(console.log(`📲 Sending alert notification to ${t.length} devices.`),await u.messaging().sendEachForMulticast({notification:{title:`⚠️ New Alert: ${r}`,body:o},tokens:t})),console.log(`⭐ Sended alert notification to ${t.length} devices.`)}catch(s){console.error("❌ Error sending FCM for alert:",s)}})(),s.broadcastToGroup&&s.broadcastToGroup(a,"all",{type:"NEW_ALERT",payload:m}),e.status(201).json({success:!0,message:"Alert sent successfully"})}catch(s){return d&&i.existsSync(d.path)&&i.unlinkSync(d.path),console.error("Error sending alert:",s),e.status(500).json({success:!1,message:"Database error"})}}),a.get("/getAlerts",r,async(s,e)=>{const{school_id:t}=s.user;if(console.log(s.user),!t)return e.status(401).json({success:!1,message:"Authorization failed: Invalid token."});try{await n.query("DELETE FROM alerts WHERE sid = ? AND expires_at IS NOT NULL AND expires_at <= NOW()",[t]);const[s]=await n.query("SELECT * FROM alerts WHERE sid = ? AND (expires_at IS NULL OR expires_at > NOW()) ORDER BY created_at DESC",[t]);return e.status(200).json({success:!0,alerts:s})}catch(s){return console.error("Error fetching alerts:",s),e.status(500).json({success:!1,message:"Server error"})}}),s.exports=a},780:(s,e,t)=>{const a=t(252),n=t(268),r=t(729),o=t(494),c=a(),i=t(906),u=t(206),l=t(829);c.use(n.json()),c.post("/saveFcmToken",async(s,e)=>{const{fcm_token:t,id:a}=s.body;if(!t)return e.status(400).json({message:"FCM token is required."});try{const s="UPDATE students SET fcm_token = ? WHERE student_id = ?",[n]=await o.query(s,[t,a]);e.status(200).json({message:"FCM token saved."})}catch(s){console.error("Error saving FCM token:",s),e.status(500).json({message:"Server error."})}}),c.post("/register",async(s,e)=>{const{student_id:t,email:a,password:n}=s.body;if(!t||!a||!n)return e.status(400).json({message:"All fields are required"});if(!i.isEmail(a))return e.status(400).json({message:"Invalid email format"});if(!i.isStrongPassword(n,{minLength:8,minLowercase:1,minUppercase:1,minNumbers:1,minSymbols:1}))return e.status(400).json({message:"Password must be at least 8 characters, include uppercase, lowercase, number, and symbol"});try{const[s]=await o.query("SELECT * FROM students WHERE SLID = ?",[t]);if(0===s.length)return e.status(400).json({message:"Invalid Student Login ID"});if(1===s[0].is_Register)return e.status(400).json({message:"Student already registered"});const[c]=await o.query("SELECT * FROM students WHERE email = ?",[a]);if(c.length>0)return e.status(400).json({message:"Email is already registered"});const i=await r.hash(n,10);return await o.query("UPDATE students SET email = ?, password_hash = ?, is_Register = 1 WHERE SLID = ?",[a,i,t]),e.status(200).json({message:"Registration successful!"})}catch(s){return console.error(s),e.status(500).json({message:"Server error"})}}),c.post("/login",async(s,e)=>{const{student_id:t,email:a,password:n}=s.body;if(!t||!a||!n)return e.status(400).json({success:!1,message:"All fields (student_id, email, password) are required."});try{const[s]=await o.query("SELECT student_id, SLID, name, email, password_hash, School_id, class_id, is_Register, is_Login FROM students WHERE SLID = ? LIMIT 1",[t]),c={success:!1,message:"Invalid credentials."};if(0===s.length)return e.status(401).json(c);const i=s[0];if(1!==i.is_Register)return e.status(403).json({success:!1,message:"This account has not been registered yet."});if(1===i.is_Login)return e.status(409).json({success:!1,message:"This account is currently logged in on another device."});const u=await r.compare(n,i.password_hash);if(i.email!==a||!u)return e.status(401).json(c);const d={id:i.student_id,slid:i.SLID,school_id:i.School_id,email:i.email},m=l.sign(d,process.env.JWT_SECRET,{expiresIn:"24h"});await o.query("UPDATE students SET Token = ?, is_Login = 1 WHERE SLID = ?",[m,t]);const[h]=await o.query("SELECT school_name, school_id, image, headmaster_name, school_adr FROM schools WHERE school_id = ? LIMIT 1",[i.School_id]),[g]=await o.query("SELECT c.class_name, t.name AS teacher_name\n       FROM classes c\n       JOIN teachers t ON c.main_teacher_id = t.TID\n       WHERE c.class_id = ?",[i.class_id]);if(0===h.length||0===g.length)return console.error(`Configuration error for student SLID: ${t}. School or Class not found.`),e.status(500).json({success:!1,message:"Account configuration error. Please contact support."});const _={Token:m,school:h[0],schoolimage:h[0].image,student_id:i.student_id,SLID:i.SLID,name:i.name,email:i.email,School_id:i.School_id,class_id:i.class_id,className:g[0].class_name,teacher_name:g[0].teacher_name};return console.log(_),e.status(200).json({success:!0,message:"Login successful",data:_})}catch(s){return console.error("❌ Error in /login endpoint:",s),e.status(500).json({success:!1,message:"Server error. Please try again later."})}}),c.post("/auto-login",u,async(s,e)=>{try{const t=s.user.id,[a]=await o.query("SELECT student_id, SLID, name, email, School_id, class_id FROM students WHERE student_id = ? AND is_Login = 1 LIMIT 1",[t]);if(0===a.length)return e.status(404).json({valid:!1,success:!1,message:"Student not found or not logged in."});const n=a[0],[r]=await o.query("SELECT school_name, school_id, image, headmaster_name, school_adr FROM schools WHERE school_id = ? LIMIT 1",[n.School_id]),[c]=await o.query("SELECT c.class_name, t.name AS teacher_name\n       FROM classes c\n       JOIN teachers t ON c.main_teacher_id = t.TID\n       WHERE c.class_id = ?",[n.class_id]);return 0===r.length||0===c.length?e.status(500).json({valid:!1,success:!1,message:"Account configuration error. Please contact support."}):e.status(200).json({valid:!0,success:!0,message:"Token is valid. Auto-login successful."})}catch(s){return console.error("❌ Error in /auto-login endpoint:",s),e.status(500).json({valid:!1,success:!1,message:"Server error. Please try again later."})}}),s.exports=c},818:s=>{"use strict";s.exports=require("dotenv")},829:s=>{"use strict";s.exports=require("jsonwebtoken")},856:s=>{"use strict";s.exports=require("http")},881:(s,e,t)=>{const a=t(252),n=t(268),r=t(577),o=a();o.use(r()),o.use(n.json());const c=t(494);async function i(s){const[e]=await c.query("SELECT id, author_name, title, content, receiver_type, created_at, updated_at FROM announcements WHERE sid = ? ORDER BY created_at DESC",[s]);return e}async function u(s){const[e]=await c.query("SELECT id, title, description, event_start, event_end, organizer_name, created_at, updated_at FROM events WHERE sid = ? ORDER BY event_start DESC",[s]);return e}async function l(s){const[e]=await c.query("SELECT school_id, school_name, headmaster_name, school_adr, school_email, image FROM schools WHERE school_id = ? LIMIT 1",[s]);return e.length>0?e[0]:null}async function d(s){const[e]=await c.query("SELECT year, count FROM analastics WHERE school_id = ? ORDER BY year DESC",[s]);return e}o.post("/DataDistribution",async(s,e)=>{try{const{ID:t,Token:a}=s.body;if(!t||!a)return e.status(400).json({Status:400,Message:"Missing ID or Token"});const[n,r,o,c]=await Promise.all([l(t),i(t),u(t),d(t)]);if(!n)return e.status(404).json({Status:404,Message:"School not found"});e.json({Status:200,Data:[{SchoolID:n.school_id,SchoolName:n.school_name,Headmaster:n.headmaster_name,Address:n.school_adr,Email:n.school_email,SchoolImage:n.image,Announcements:r,Events:o,StudentStats:c}]})}catch(s){console.error("API Error:",s),e.status(500).json({Status:500,Message:"Server Error"})}}),o.get("/classes",async(s,e)=>{try{const s="\n      SELECT c.class_id, c.class_name, t.name AS teacher_name, c.school_id\n      FROM classes c\n      LEFT JOIN teachers t\n        ON c.main_teacher_id = t.TID\n      ORDER BY c.class_name ASC\n    ",[t]=await c.query(s);console.log(t),e.json({success:!0,classes:t})}catch(s){console.error("Error fetching classes:",s),e.status(500).json({success:!1,message:"Server error"})}});const m=async s=>{const[e]=await c.query("SELECT student_id, name, SLID, School_id FROM students WHERE class_id = ?",[s]);return e},h=async s=>{const[e]=await c.query("\n    SELECT \n      t.teacher_id, \n      t.name, \n      t.subject \n    FROM class_teachers ct\n    JOIN teachers t ON ct.teacher_id = t.TID\n    WHERE ct.class_id = ?\n  ",[s]);return e};o.get("/class/:id/details",async(s,e)=>{try{const{id:t}=s.params;if(!t)return e.status(400).json({success:!1,message:"Class ID is required."});const[a,n]=await Promise.all([m(t),h(t)]);console.log({students:a,teachers:n}),e.status(200).json({success:!0,details:{students:a,teachers:n}})}catch(s){console.error("Error fetching class details:",s),e.status(500).json({success:!1,message:"Server error occurred while fetching class details."})}}),s.exports=o},887:s=>{"use strict";s.exports=require("tesseract.js")},896:s=>{"use strict";s.exports=require("fs")},903:s=>{"use strict";s.exports=require("uuid")},906:s=>{"use strict";s.exports=require("validator")},928:s=>{"use strict";s.exports=require("path")},942:(s,e,t)=>{const a=t(252),n=t(494),r=a();r.get("/subjectsTeacher/:classId",async(s,e)=>{const t=s.params.classId;console.log("Class ID:",t);try{const[s]=await n.query("\n    SELECT \n      t.TID,\n      t.teacher_id,\n      t.school_id,\n      t.name,\n      t.subject\n    FROM class_teachers ct\n    JOIN teachers t ON ct.teacher_id = t.TID\n    WHERE ct.class_id = ?;\n  ",[t]);return e.json({success:!0,teachers:s})}catch(s){return console.error("Error fetching teachers:",s),e.status(500).json({success:!1,message:"Database error"})}}),s.exports=r},982:s=>{"use strict";s.exports=require("crypto")}},e={};function t(a){var n=e[a];if(void 0!==n)return n.exports;var r=e[a]={exports:{}};return s[a](r,r.exports,t),r.exports}t(818);const a=t(252),n=t(577),r=t(856),o=t(928),{WebSocketServer:c,WebSocket:i}=t(86),u=t(675),l=t(196),d=t(262),m=t(749),h=t(561),g=t(644),_=t(690),E=t(713),y=t(717),f=t(455),S=t(881),p=t(780),T=t(525),R=t(942),j=t(318),I=t(3);try{const s=t(519);u.initializeApp({credential:u.credential.cert(s)}),console.log("✅ Firebase Admin SDK initialized successfully.")}catch(s){console.error("❌ Error initializing Firebase Admin SDK:",s),process.exit(1)}const w=a(),A=r.createServer(w);w.use(n()),w.use(a.json()),w.set("case sensitive routing",!0);const M=new c({server:A}),D=new Map;function N(s,e){const t=D.get(s.toString());t&&t.readyState===i.OPEN&&t.send(JSON.stringify(e))}M.on("connection",s=>{console.log("✅ Client connected to WebSocket"),s.on("message",e=>{try{const t=JSON.parse(e);"REGISTER"===t.type&&t.userId&&(function(s,e){e&&(D.set(e.toString(),s),s.userId=e.toString())}(s,t.userId),console.log(`📌 Registered client for user ${t.userId}`))}catch(s){console.error("❌ Invalid WS message:",s.toString())}}),s.on("close",()=>{console.log(`❌ Client for user ${s.userId} disconnected`),function(s){s.userId&&D.delete(s.userId)}(s)}),s.send(JSON.stringify({message:"Welcome! You are connected."}))}),w.use((s,e,t)=>{s.sendMessageToUser=N,t()}),w.use("/Admin",l),w.use("/school",d),w.use("/Teacher",g),w.use("/ClassTeacher",_),w.use("/DataHandlingTeacher",E),w.use("/Assignment",y),w.use("/Attendance",f),w.use("/Students",p),w.use("/Alerts",m),w.use("/Events",h),w.use("/Announcements",T),w.use("/getData",S),w.use("/StudentClass",R),w.use("/ChatSystem",j),w.use("/AI",I);const O=o.join(__dirname,"uploads");w.use("/uploads",a.static(O));const L=process.env.IP_ADDRESS||"127.0.0.1",v=process.env.PORT||2973;A.listen(v,L,()=>{console.log(`🚀 Server with WebSockets running at http://${L}:${v}`)})})();